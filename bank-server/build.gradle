plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "application"
    id 'jacoco'
    id 'groovy'
    id 'maven-publish'
    id "org.sonarqube" version "2.8"
    id "org.owasp.dependencycheck" version "6.1.5"
}

def props = new Properties()
file("version.properties").withInputStream { props.load(it) }
String buildNumber = System.getenv("BUILD_NUMBER")

version = buildNumber ? "${props.VERSION}.${buildNumber}" : "${props.VERSION}-SNAPSHOT"
group "com.raidiam.trustframework.bank"


sonarqube {
    properties {
        property "sonar.projectKey", "YOUR KEY"
        property "sonar.organization", "YOUR ORG"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.coverage.exclusions', "**/com/raidiam/trustframework/mockbank/models/**,**/com/raidiam/trustframework/mockbank/domain/**,**/com/raidiam/trustframework/mockbank/db/**,**/com/raidiam/trustframework/mockbank/audit/**"
    }
}

dependencyCheck {
    formats = ['HTML','XML']
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
    repositories {
        maven {
            url "YOUR URL HERE"
            authentication {
                awsIm(AwsImAuthentication) // load from EC2 role or env var
            }
        }
    }
}

repositories {
    mavenCentral()
    //maven { url "https://jcenter.bintray.com" }
    maven {
        url "YOUR URL HERE"
        authentication {
            awsIm(AwsImAuthentication) // load from EC2 role or env var
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencyManagement {
    imports {
        mavenBom('com.amazonaws:aws-java-sdk-bom:1.11.866')
        mavenBom('com.amazonaws:aws-xray-recorder-sdk-bom:2.4.0')
    }
}

ext {
    micronautDataVersion = "2.3.1"
    micronautSecurityVersion = "2.3.2"
    swaggerVersion = "1.0.0.93"
}

dependencies {

    //These must be above the micronaut stuff, so lombok can generate the boilerplate
    //for micronaut/hibernate to look at
    compileOnly 'org.projectlombok:lombok:1.18.18'
    annotationProcessor 'org.projectlombok:lombok:1.18.18'

    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java:$micronautVersion"
    annotationProcessor "io.micronaut:micronaut-validation:$micronautVersion"
    annotationProcessor "io.micronaut.security:micronaut-security:$micronautSecurityVersion"
    annotationProcessor "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"

    implementation 'org.bouncycastle:bcpkix-jdk15on:1.68'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.7'
    implementation 'org.postgresql:postgresql:42.2.19'
    implementation "io.micronaut.security:micronaut-security:$micronautSecurityVersion"
    implementation "com.google.guava:guava:20.0"

    implementation "com.raidiam.trustframework.mockbank:mockbank-swagger:${swaggerVersion}"
    implementation "com.raidiam.trustframework.bank:bank-swagger:1.1.3"

    implementation 'com.amazonaws:aws-java-sdk-api-gateway:1.11.989'
    runtimeOnly("com.amazonaws:aws-xray-recorder-sdk-core")
    runtimeOnly("com.amazonaws:aws-xray-recorder-sdk-aws-sdk")
    runtimeOnly("com.amazonaws:aws-xray-recorder-sdk-aws-sdk-instrumentor")
    runtimeOnly("com.amazonaws:aws-xray-recorder-sdk-sql-postgres")

    runtimeOnly 'org.jlib:jlib-awslambda-logback:1.0.0'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.6'

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation("io.micronaut.aws:micronaut-function-aws-custom-runtime:$micronautVersion") {
        exclude group: "com.fasterxml.jackson.module", module: "jackson-module-afterburner"
    }
    implementation("io.micronaut.aws:micronaut-function-aws-api-proxy:$micronautVersion") {
        exclude group: "com.fasterxml.jackson.module", module: "jackson-module-afterburner"
    }
    developmentOnly "io.micronaut:micronaut-http-server-netty:$micronautVersion"
    implementation "io.micronaut:micronaut-http-client:$micronautVersion"
    implementation "io.micronaut:micronaut-inject:$micronautVersion"
    implementation "io.micronaut:micronaut-validation:$micronautVersion"
    implementation "io.micronaut:micronaut-runtime:$micronautVersion"
    implementation "io.micronaut.data:micronaut-data-hibernate-jpa:$micronautDataVersion", {
        exclude group:'io.micronaut.configuration', module:'micronaut-hibernate-jpa-spring'
    }
    implementation 'org.hibernate:hibernate-envers:5.4.30.Final'
    implementation "org.flywaydb:flyway-core:7.7.1"
    implementation "io.micronaut.flyway:micronaut-flyway"

    runtime "io.micronaut.configuration:micronaut-jdbc-tomcat:2.2.6"

    implementation ("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.2")

    // -- TEST DEPS

    testImplementation "org.objenesis:objenesis:3.1"
    testImplementation "org.testcontainers:spock:1.15.2"
    testImplementation "org.testcontainers:localstack:1.15.2"
    testImplementation "org.testcontainers:postgresql:1.15.2"
    testImplementation 'org.mock-server:mockserver-netty:5.5.4'
    testImplementation 'org.mock-server:mockserver-client-java:5.5.4'
    testImplementation "io.micronaut.test:micronaut-test-spock:2.3.3"
    testImplementation "io.micronaut:micronaut-inject-groovy:2.4.2"

    testImplementation "org.codehaus.groovy:groovy:3.0.7"
    testCompile "org.codehaus.groovy:groovy:3.0.7"

    testCompile platform("org.spockframework:spock-bom:2.0-M5-groovy-3.0")
    testImplementation ("org.spockframework:spock-core:2.0-M5-groovy-3.0"){
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }

    testImplementation "com.h2database:h2"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
}

test.outputs.upToDateWhen {false}

test {
    useJUnitPlatform()
    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }
    classpath += configurations.developmentOnly
    environment "AWS_XRAY_CONTEXT_MISSING", "LOG_ERROR"
    finalizedBy jacocoTestReport
    jacoco {
        excludes = ['com.raidiam.trustframework.bank.models.*']
    }
    testLogging {
        showStandardStreams true
        events "started", "passed", "skipped", "failed"
    }
}

mainClassName = "com.raidiam.trustframework.bank.Application"

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'com/raidiam/trustframework/mockbank/models/**')
        }))
    }
    reports {
        xml.enabled true
    }
}
